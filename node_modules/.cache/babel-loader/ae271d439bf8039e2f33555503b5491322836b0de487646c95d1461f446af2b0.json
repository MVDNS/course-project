{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { usersAPI } from '../../api/API';\nexport const getUsersServer = createAsyncThunk('users/fetchUserById',\n// отображается в dev tools и должно быть уникально у каждого Thunk\nasync () => {\n  // Здесь только логика запроса и возврата данных\n  // Никакой обработки ошибок\n  const response = await usersAPI.getUsers();\n  return response.data;\n});\nconst initialState = {\n  users: [],\n  status: null,\n  error: null\n};\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    builder\n    // Вызывается прямо перед выполнением запроса\n    .addCase(getUsersServer.pending, state => {\n      state.loadingStatus = 'loading';\n      state.error = null;\n    })\n    // Вызывается в том случае если запрос успешно выполнился\n    .addCase(getUsersServer.fulfilled, (state, action) => {\n      // Добавляем пользователя\n      usersAdapter.addOne(state, action);\n      state.loadingStatus = 'fulfilled';\n      state.error = null;\n    })\n    // Вызывается в случае ошибки\n    .addCase(getUsersServer.rejected, (state, action) => {\n      state.loadingStatus = 'failed';\n      state.error = action.error;\n    });\n  }\n});\nexport const {\n  addCase\n} = usersSlice.action;\nexport default usersSlice.reducer;\n// Later, dispatch the thunk as needed in the app","map":{"version":3,"names":["createSlice","createAsyncThunk","usersAPI","getUsersServer","response","getUsers","data","initialState","users","status","error","usersSlice","name","reducers","extraReducers","builder","addCase","pending","state","loadingStatus","fulfilled","action","usersAdapter","addOne","rejected","reducer"],"sources":["/Users/volcano/Documents/Projects/02project/course-project/src/redux/reduxSlices/usersSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { usersAPI } from '../../api/API'\n\nexport const getUsersServer = createAsyncThunk(\n\t'users/fetchUserById', // отображается в dev tools и должно быть уникально у каждого Thunk\n\tasync () => {\n\t\t// Здесь только логика запроса и возврата данных\n\t\t// Никакой обработки ошибок\n\t\tconst response = await usersAPI.getUsers();\n\t\treturn response.data;\n\t}\n);\n\n\nconst initialState = {\n\tusers: [],\n\tstatus: null,\n\terror: null,\n}\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n\tname: 'users',\n\tinitialState,\n\treducers: {\n\t\t// standard reducer logic, with auto-generated action types per reducer\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t// Вызывается прямо перед выполнением запроса\n\t\t\t.addCase(getUsersServer.pending, (state) => {\n\t\t\t\tstate.loadingStatus = 'loading';\n\t\t\t\tstate.error = null;\n\t\t\t})\n\t\t\t// Вызывается в том случае если запрос успешно выполнился\n\t\t\t.addCase(getUsersServer.fulfilled, (state, action) => {\n\t\t\t\t// Добавляем пользователя\n\t\t\t\tusersAdapter.addOne(state, action);\n\t\t\t\tstate.loadingStatus = 'fulfilled';\n\t\t\t\tstate.error = null;\n\t\t\t})\n\t\t\t// Вызывается в случае ошибки\n\t\t\t.addCase(getUsersServer.rejected, (state, action) => {\n\t\t\t\tstate.loadingStatus = 'failed';\n\t\t\t\tstate.error = action.error;\n\t\t\t});\n\t},\n})\n\nexport const { addCase } = usersSlice.action\nexport default usersSlice.reducer\n// Later, dispatch the thunk as needed in the app"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,eAAe;AAExC,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAC7C,qBAAqB;AAAE;AACvB,YAAY;EACX;EACA;EACA,MAAMG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,QAAQ,EAAE;EAC1C,OAAOD,QAAQ,CAACE,IAAI;AACrB,CAAC,CACD;AAGD,MAAMC,YAAY,GAAG;EACpBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC9BY,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACT;EAAA,CACA;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC3BA;IACC;IAAA,CACCC,OAAO,CAACb,cAAc,CAACc,OAAO,EAAGC,KAAK,IAAK;MAC3CA,KAAK,CAACC,aAAa,GAAG,SAAS;MAC/BD,KAAK,CAACR,KAAK,GAAG,IAAI;IACnB,CAAC;IACD;IAAA,CACCM,OAAO,CAACb,cAAc,CAACiB,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MACrD;MACAC,YAAY,CAACC,MAAM,CAACL,KAAK,EAAEG,MAAM,CAAC;MAClCH,KAAK,CAACC,aAAa,GAAG,WAAW;MACjCD,KAAK,CAACR,KAAK,GAAG,IAAI;IACnB,CAAC;IACD;IAAA,CACCM,OAAO,CAACb,cAAc,CAACqB,QAAQ,EAAE,CAACN,KAAK,EAAEG,MAAM,KAAK;MACpDH,KAAK,CAACC,aAAa,GAAG,QAAQ;MAC9BD,KAAK,CAACR,KAAK,GAAGW,MAAM,CAACX,KAAK;IAC3B,CAAC,CAAC;EACJ;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM;AAAQ,CAAC,GAAGL,UAAU,CAACU,MAAM;AAC5C,eAAeV,UAAU,CAACc,OAAO;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}