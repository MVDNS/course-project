{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { usersAPI } from '../../api/API';\nexport const getUsersServer = createAsyncThunk('users/fetchUserById',\n// отображается в dev tools и должно быть уникально у каждого Thunk\nasync () => {\n  // Здесь только логика запроса и возврата данных\n  // Никакой обработки ошибок\n  const response = await usersAPI.getUsers();\n  return response.data;\n});\nconst initialState = {\n  users: [],\n  status: null,\n  error: null\n};\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.entities.push(action.payload);\n    });\n  }\n});\nexport const {\n  addCase\n} = usersSlice.action;\nexport default usersSlice.reducer;\n// Later, dispatch the thunk as needed in the app","map":{"version":3,"names":["createSlice","createAsyncThunk","usersAPI","getUsersServer","response","getUsers","data","initialState","users","status","error","usersSlice","name","reducers","extraReducers","builder","addCase","fetchUserById","fulfilled","state","action","entities","push","payload","reducer"],"sources":["/Users/volcano/Documents/Projects/02project/course-project/src/redux/reduxSlices/usersSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { usersAPI } from '../../api/API'\n\nexport const getUsersServer = createAsyncThunk(\n\t'users/fetchUserById', // отображается в dev tools и должно быть уникально у каждого Thunk\n\tasync () => {\n\t\t// Здесь только логика запроса и возврата данных\n\t\t// Никакой обработки ошибок\n\t\tconst response = await usersAPI.getUsers();\n\t\treturn response.data;\n\t}\n);\n\n\nconst initialState = {\n\tusers: [],\n\tstatus: null,\n\terror: null,\n}\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n\tname: 'users',\n\tinitialState,\n\treducers: {\n\t\t// standard reducer logic, with auto-generated action types per reducer\n\t},\n\textraReducers: (builder) => {\n\t\t// Add reducers for additional action types here, and handle loading state as needed\n\t\tbuilder.addCase(fetchUserById.fulfilled, (state, action) => {\n\t\t\t// Add user to the state array\n\t\t\tstate.entities.push(action.payload)\n\t\t})\n\t},\n})\n\nexport const { addCase } = usersSlice.action\nexport default usersSlice.reducer\n// Later, dispatch the thunk as needed in the app"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,eAAe;AAExC,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAC7C,qBAAqB;AAAE;AACvB,YAAY;EACX;EACA;EACA,MAAMG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,QAAQ,EAAE;EAC1C,OAAOD,QAAQ,CAACE,IAAI;AACrB,CAAC,CACD;AAGD,MAAMC,YAAY,GAAG;EACpBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC9BY,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACT;EAAA,CACA;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC3B;IACAA,OAAO,CAACC,OAAO,CAACC,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3D;MACAD,KAAK,CAACE,QAAQ,CAACC,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;IACpC,CAAC,CAAC;EACH;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP;AAAQ,CAAC,GAAGL,UAAU,CAACS,MAAM;AAC5C,eAAeT,UAAU,CAACa,OAAO;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}