{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { usersAPI } from '../../api/API';\n\n// First, create the thunk\nconst fetchUserById = createAsyncThunk('users/fetchByIdStatus', async () => {\n  const response = await usersAPI.getUsers();\n  return response.data;\n});\nconst initialState = {\n  entities: [],\n  loading: 'idle'\n};\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.entities.push(action.payload);\n    });\n  }\n});\n\n// Later, dispatch the thunk as needed in the app","map":{"version":3,"names":["createSlice","createAsyncThunk","usersAPI","fetchUserById","response","getUsers","data","initialState","entities","loading","usersSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","push","payload"],"sources":["/Users/volcano/Documents/Projects/02project/course-project/src/redux/reduxSlices/usersSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { usersAPI } from '../../api/API'\n\n// First, create the thunk\nconst fetchUserById = createAsyncThunk(\n\t'users/fetchByIdStatus',\n\tasync () => {\n\t\tconst response = await usersAPI.getUsers()\n\t\treturn response.data\n\t}\n)\n\n\nconst initialState = {\n\tentities: [],\n\tloading: 'idle',\n}\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n\tname: 'users',\n\tinitialState,\n\treducers: {\n\t\t// standard reducer logic, with auto-generated action types per reducer\n\t},\n\textraReducers: (builder) => {\n\t\t// Add reducers for additional action types here, and handle loading state as needed\n\t\tbuilder.addCase(fetchUserById.fulfilled, (state, action) => {\n\t\t\t// Add user to the state array\n\t\t\tstate.entities.push(action.payload)\n\t\t})\n\t},\n})\n\n// Later, dispatch the thunk as needed in the app"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,eAAe;;AAExC;AACA,MAAMC,aAAa,GAAGF,gBAAgB,CACrC,uBAAuB,EACvB,YAAY;EACX,MAAMG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,QAAQ,EAAE;EAC1C,OAAOD,QAAQ,CAACE,IAAI;AACrB,CAAC,CACD;AAGD,MAAMC,YAAY,GAAG;EACpBC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACV,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGV,WAAW,CAAC;EAC9BW,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACT;EAAA,CACA;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC3B;IACAA,OAAO,CAACC,OAAO,CAACZ,aAAa,CAACa,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3D;MACAD,KAAK,CAACT,QAAQ,CAACW,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACpC,CAAC,CAAC;EACH;AACD,CAAC,CAAC;;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}